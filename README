GameAI v0.5.3 May 4, 2015

CONTENTS
---------------------------------------

* Introduction
* Installation
* Operating Instructions
* File Manifest
* Copyright and Licensing
* Known Bugs
* Credits and Acknowledgements
* Contact Information

Introduction
---------------------------------------
GameAI is a set of board games written in C++.  The games include Tic-Tac-Toe, 
Connect Four, and Reversi.  Each game may be played by two players, either human
or computer.  The computer player is engineered on the Minimax algorithm with 
Alpha-beta pruning enabled.  Players may be on networked computers in a 
client-server mode.

The key to the Minimax algorithm are the heuristics measuring the advantage of
one player over the other.  These heuristics are contained in the 
EvaluateGameState method of the games.  Improvements in these methods will 
improve the AI.

Specific future improvements to EvaluateGameState:
- Evaluate board state with a weighted sum of diffefrent measures, including
    peice location, control of position, and calculation of momentum 
- Implement a learning mode, where the weights of the different measures are
  compared to the win or loss of a game and adjusted accordingly 
  (maybe "hill climbing")




Installation
---------------------------------------
Requirements:
* C+11 compiler
* Make utility

1) Install source code (see File Manifest below) to a folder.
2) Run make using GameAI.cbp.mak.* where * is the operating system.  Targets
   include debug and release for Linux operating systems and debug_windows and 
   release_windows for Windows operating systems.




Operating Instructions
---------------------------------------
Run GameAI:

Usage: GameAI OPTIONS
Run a Game AI program

Required Options:
    -1 TYPE,  --player1=TYPE  assign TYPE of player to Player 1
    -2 TYPE,  --player2=TYPE  assign TYPE of player to Player 2
    -g GAME,  --game=GAME     play GAME

Non Required Options:
              --port=PORT     port for network communications.  Required for TYPE of server and client.
    -h,       --host=HOSTNAME host address or name of the server.  Required for TYPE server.
    -H,       --help          display this help message and exit
    -p PLIES, --plies=PLIES   assign the number of PLIES that minimax players will use
              --plies1=PLIES  assign the number of PLIES to Player 1, if minimax
              --plies2=PLIES  assign the number of PLIES to Player 2, if minimax
    -v LEVEL, --verbose=LEVEL display game information
    -V,       --version       display version and exit

PORT is a port specification for a server and client to communicate over.  The default is 60000.
HOST is a host name or address for a server.  The default is 127.0.0.1.
TYPE is either human, minimax, client, or server.  Start a server before staring a client.
PLIES are from 1 to 9.  The default is 4.
GAME is ttt, connectfour, or reversi.
LEVEL is an integer 0 to 3.  The default is 1.
    0 = display start and ending announcements
    1 = display game move-by-move
    2 = display AI scoring of moves and basic network communications
    3 = display AI evaluation of moves and detailed network communications

Examples:
GameAI -1 human -2 minimax -g ttt

GameAI -1 human  -2 client --port=60001 -g connecfour
GameAI -1 server -2 human  --port=60001 --host=192.168.0.1 -g connecfour




File Manifest
---------------------------------------
GameAI/GameAI.cbp                 -- Code::Blocks project file
GameAI/GameAI.cbp.mak.mac         -- Make file for Mac
GameAI/GameAI.cbp.mak.unix        -- Make file for UNIX
GameAI/GameAI.cbp.mak.windows     -- Make file for Windows

GameAI/main.cpp                   -- Run the game

GameAI/src/Client.cpp             -- Client player (proxy for server)
GameAI/src/ConnectFour.cpp        -- Connect Four game
GameAI/src/Game.cpp               -- Virtual game class
GameAI/src/GameVocabulary.cpp     -- Game vocabulary between server and client 
GameAI/src/GameMove.cpp           -- Game move 
GameAI/src/Human.cpp              -- Human player
GameAI/src/LinearGame.cpp         -- Virtual linear game
GameAI/src/Logger.cpp             -- Support logging
GameAI/src/Minimax.cpp            -- The computer player
GameAI/src/NetworkPlayer.cpp      -- Parent class for Server and Client
GameAI/src/Player.cpp             -- Virtual game player
GameAI/src/Reversi.cpp            -- Reversi game
GameAI/src/Server.cpp             -- Server player (proxy for client)
GameAI/src/Socket.cpp             -- Socket parent class NetworkPlayer
GameAI/src/TTT.cpp                -- Tic-Tac-Toe game

GameAI/include/Client.h       
GameAI/include/ConnectFour.h              
GameAI/include/GameAIException.h  -- Custom logic exception
GameAI/include/GameAIVersion.h    -- Version information
GameAI/include/Game.h
GameAI/include/GameMove.h
GameAI/include/GameVocabulary.h
GameAI/include/Human.h
GameAI/include/LinearGame.h
GameAI/include/Logger.h
GameAI/include/Minimax.h
GameAI/include/NetworkPlayer.h
GameAI/include/Player.h
GameAI/include/Reversi.h
GameAI/include/Server.h
GameAI/include/SocketException.h  -- Custom runtime exception
GameAI/include/Socket.h
GameAI/include/TTT.h




Copyright and Licensing
---------------------------------------
GameAI is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GameAI is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GameAI.  If not, see <http://www.gnu.org/licenses/>.




Known Bugs
---------------------------------------
- In Reversi, the NO MOVE will confuse network play
- hostname does not work, only host address




Credits and Acknowledgements
---------------------------------------
Luger, George F., Stubblefield, William A.  "Artifical Intelligence and the 
  Design of Expert Systems"  New Mexico: The Benjamin/Cummings Publishing 
  Company, 1989.

Tougher, Rob "Linux Socket Programming in C++", Linux Gazette, Issue 74, 
  January 2002




Contact Information
---------------------------------------
Dom Maddalone dominick dot maddalone at gmail dot com
