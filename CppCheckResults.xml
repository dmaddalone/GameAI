<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="..\jsoncpp\dist\json\json.h" line="585" id="unusedStructMember" severity="style" msg="struct or union member &apos;StringStorage::policy_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="586" id="unusedStructMember" severity="style" msg="struct or union member &apos;StringStorage::length_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="936" id="unusedStructMember" severity="style" msg="struct or union member &apos;ValueHolder::int_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="937" id="unusedStructMember" severity="style" msg="struct or union member &apos;ValueHolder::uint_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="938" id="unusedStructMember" severity="style" msg="struct or union member &apos;ValueHolder::real_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="939" id="unusedStructMember" severity="style" msg="struct or union member &apos;ValueHolder::bool_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="940" id="unusedStructMember" severity="style" msg="struct or union member &apos;ValueHolder::string_&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="1256" id="unusedStructMember" severity="style" msg="struct or union member &apos;StructuredError::offset_start&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="1257" id="unusedStructMember" severity="style" msg="struct or union member &apos;StructuredError::offset_limit&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;JSON_DLL&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\json\json.h" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;JSON_DLL_BUILD&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\json\json.h" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;JSON_DLL_BUILD;_MSC_VER&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\json\json.h" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;__GNUC__&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\json\json.h" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;__clang__;__has_feature&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="877" id="variableScope" severity="style" msg="The scope of the variable &apos;surrogatePair&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1840" id="variableScope" severity="style" msg="The scope of the variable &apos;surrogatePair&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="4484" id="uninitMemberVar" severity="style" msg="Member variable &apos;StyledStreamWriter::indented_&apos; is not initialized in the constructor." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1090" id="uninitMemberVar" severity="style" msg="Member variable &apos;OurFeatures::rejectDupKeys_&apos; is not initialized in the constructor." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1090" id="uninitMemberVar" severity="style" msg="Member variable &apos;OurFeatures::stackLimit_&apos; is not initialized in the constructor." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1220" id="uninitMemberVar" severity="style" msg="Member variable &apos;OurReader::stackDepth_&apos; is not initialized in the constructor." />
    <error file="..\jsoncpp\dist\json\json.h" line="398" id="noExplicitConstructor" severity="style" msg="Class &apos;Exception&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="413" id="noExplicitConstructor" severity="style" msg="Class &apos;RuntimeError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="424" id="noExplicitConstructor" severity="style" msg="Class &apos;LogicError&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="620" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="621" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="622" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="624" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="625" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="627" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="628" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="645" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="646" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="650" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="568" id="noExplicitConstructor" severity="style" msg="Class &apos;CZString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="962" id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="963" id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="964" id="noExplicitConstructor" severity="style" msg="Class &apos;PathArgument&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="1146" id="noExplicitConstructor" severity="style" msg="Class &apos;ValueIterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="1269" id="noExplicitConstructor" severity="style" msg="Class &apos;Reader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\json\json.h" line="1896" id="noExplicitConstructor" severity="style" msg="Class &apos;StyledStreamWriter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1114" id="noExplicitConstructor" severity="style" msg="Class &apos;OurReader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;JSON_DLL&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;JSON_DLL_BUILD&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;JSON_DLL_BUILD;_MSC_VER&apos; was not checked because its code equals another one." />
    <error file="..\jsoncpp\dist\json\json.h" line="648" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="4024" id="redundantAssignment" severity="style" msg="Variable &apos;len&apos; is reassigned a value before the old one has been used." />
    <error file="include\Hand.h" line="121" id="syntaxError" severity="error" msg="syntax error" />
    <error file="include\Socket.h" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;_WIN32&apos; was not checked because its code equals another one." />
    <error file="include\AllowedMoves.h" line="35" id="noConstructor" severity="style" msg="The class &apos;AllowedMoves&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="include\GameBoard.h" line="48" id="uninitMemberVar" severity="style" msg="Member variable &apos;GameBoard::m_uiZobristKey&apos; is not initialized in the constructor." />
    <error file="src\CardGameBasicRummy.cpp" line="632" id="variableScope" severity="style" msg="The scope of the variable &apos;bDisplayedScoreLastTime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\CardGameBasicRummy.cpp" line="475" id="unreadVariable" severity="style" msg="Variable &apos;sMessage&apos; is assigned a value that is never used." />
    <error file="src\CardGameBasicRummy.cpp" line="879" id="unreadVariable" severity="style" msg="Variable &apos;sCards&apos; is assigned a value that is never used." />
    <error file="src\CardGameBasicRummy.cpp" line="880" id="unreadVariable" severity="style" msg="Variable &apos;vDoNotDiscard&apos; is assigned a value that is never used." />
    <error file="src\CardGameBasicRummy.cpp" line="889" id="unreadVariable" severity="style" msg="Variable &apos;sLogMessage&apos; is assigned a value that is never used." />
    <error file="src\CardGameBasicRummy.cpp" line="1115" id="unreadVariable" severity="style" msg="Variable &apos;sLogMessage&apos; is assigned a value that is never used." />
    <error file="include\CardGameBasicRummy.h" line="39" id="noExplicitConstructor" severity="style" msg="Class &apos;CardGameBasicRummy&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\CardGameGoFish.cpp" line="381" id="variableScope" severity="style" msg="The scope of the variable &apos;bDisplayedScoreLastTime&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\CardGameGoFish.cpp" line="588" id="variableScope" severity="style" msg="The scope of the variable &apos;nAsks&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\CardGameGoFish.cpp" line="873" id="variableScope" severity="style" msg="The scope of the variable &apos;nPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="include\CardGameGoFish.h" line="39" id="noExplicitConstructor" severity="style" msg="Class &apos;CardGameGoFish&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\CardGameWar.cpp" line="270" id="variableScope" severity="style" msg="The scope of the variable &apos;nCurrentCardRankValue&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\CardGameWar.cpp" line="485" id="variableScope" severity="style" msg="The scope of the variable &apos;nPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="include\CardGameWar.h" line="38" id="noExplicitConstructor" severity="style" msg="Class &apos;CardGameWar&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\Chess.h" line="35" id="noExplicitConstructor" severity="style" msg="Class &apos;Chess&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessAttack.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessAttack&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessBaby.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessBaby&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessElena.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessElena&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\ChessGame.cpp" line="240" id="variableScope" severity="style" msg="The scope of the variable &apos;nIntermediateY&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\ChessGame.cpp" line="1004" id="variableScope" severity="style" msg="The scope of the variable &apos;nX&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\ChessGame.cpp" line="1005" id="variableScope" severity="style" msg="The scope of the variable &apos;nY&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\ChessGame.cpp" line="1006" id="variableScope" severity="style" msg="The scope of the variable &apos;bCastleWest&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\ChessGame.cpp" line="1605" id="variableScope" severity="style" msg="The scope of the variable &apos;nSecondX&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\ChessGame.cpp" line="1606" id="variableScope" severity="style" msg="The scope of the variable &apos;nSecondY&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src\ChessGame.cpp" line="1766" id="variableScope" severity="style" msg="The scope of the variable &apos;cPeek&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="include\ChessGardner.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessGardner&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessJacobsMeirovitz.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessJacobsMeirovitz&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessLosAlamos.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessLosAlamos&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessPetty.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessPetty&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessQuick.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessQuick&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\ChessSpeed.h" line="37" id="noExplicitConstructor" severity="style" msg="Class &apos;ChessSpeed&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\NetworkPlayer.h" line="42" id="noExplicitConstructor" severity="style" msg="Class &apos;NetworkPlayer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\Client.h" line="35" id="noExplicitConstructor" severity="style" msg="Class &apos;Client&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\Client.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;_WIN32&apos; was not checked because its code equals another one." />
    <error file="include\ConnectFour.h" line="35" id="noExplicitConstructor" severity="style" msg="Class &apos;ConnectFour&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\TTT.h" line="35" id="noExplicitConstructor" severity="style" msg="Class &apos;TTT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include\Reversi.h" line="35" id="noExplicitConstructor" severity="style" msg="Class &apos;Reversi&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\GameBoard.cpp" line="295" id="unreadVariable" severity="style" msg="Variable &apos;sColor&apos; is assigned a value that is never used." />
    <error file="include\Human.h" line="36" id="noExplicitConstructor" severity="style" msg="Class &apos;Human&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\NetworkPlayer.cpp" line="179" id="unusedVariable" severity="style" msg="Unused variable: sCommand" />
    <error file="src\NetworkPlayer.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;_WIN32&apos; was not checked because its code equals another one." />
    <error file="include\Server.h" line="35" id="noExplicitConstructor" severity="style" msg="Class &apos;Server&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="src\Player.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;_WIN32&apos; was not checked because its code equals another one." />
    <error file="src\PlayingCards.cpp" line="424" id="eraseDereference" severity="error" msg="The iterator &apos;it&apos; is invalid after the element it pointed to has been erased. Dereferencing or comparing it with another iterator is invalid operation." />
    <error file="src\Reversi.cpp" line="915" id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." />
    <error file="src\Server.cpp" line="0" id="purgedConfiguration" severity="style" msg="The configuration &apos;_WIN32&apos; was not checked because its code equals another one." />
    <error file="src\Socket.cpp" line="29" id="uninitMemberVar" severity="style" msg="Member variable &apos;Socket::m_nSendRecvSocketID&apos; is not initialized in the constructor." />
    <error file="src\GameMove.cpp" line="198" id="unusedFunction" severity="style" msg="The function &apos;AnnounceCard&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="1460" id="unusedFunction" severity="style" msg="The function &apos;CharReader&apos; is never used." />
    <error file="src\Hand.cpp" line="56" id="unusedFunction" severity="style" msg="The function &apos;DisplayRanks&apos; is never used." />
    <error file="include\GameMove.h" line="144" id="unusedFunction" severity="style" msg="The function &apos;DrawNumber&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="1484" id="unusedFunction" severity="style" msg="The function &apos;Factory&apos; is never used." />
    <error file="include\GameMove.h" line="138" id="unusedFunction" severity="style" msg="The function &apos;Fold&apos; is never used." />
    <error file="include\GameMove.h" line="111" id="unusedFunction" severity="style" msg="The function &apos;FromInputX&apos; is never used." />
    <error file="include\GameMove.h" line="112" id="unusedFunction" severity="style" msg="The function &apos;FromInputY&apos; is never used." />
    <error file="include\GameBoard.h" line="79" id="unusedFunction" severity="style" msg="The function &apos;GameBoard&apos; is never used." />
    <error file="src\PlayingCards.cpp" line="128" id="unusedFunction" severity="style" msg="The function &apos;HasCardsOfSuit&apos; is never used." />
    <error file="include\AllowedMoves.h" line="55" id="unusedFunction" severity="style" msg="The function &apos;InUse&apos; is never used." />
    <error file="src\Logger.cpp" line="151" id="unusedFunction" severity="style" msg="The function &apos;LogDebug&apos; is never used." />
    <error file="src\Logger.cpp" line="125" id="unusedFunction" severity="style" msg="The function &apos;LogError&apos; is never used." />
    <error file="src\Logger.cpp" line="138" id="unusedFunction" severity="style" msg="The function &apos;LogFatal&apos; is never used." />
    <error file="src\Logger.cpp" line="112" id="unusedFunction" severity="style" msg="The function &apos;LogWarn&apos; is never used." />
    <error file="include\Logger.h" line="38" id="unusedFunction" severity="style" msg="The function &apos;Logger&apos; is never used." />
    <error file="src\GameBoard.cpp" line="192" id="unusedFunction" severity="style" msg="The function &apos;PositionOccupiedBy&apos; is never used." />
    <error file="src\PlayingCards.cpp" line="377" id="unusedFunction" severity="style" msg="The function &apos;RemoveCardsOfSuit&apos; is never used." />
    <error file="include\AllowedMoves.h" line="51" id="unusedFunction" severity="style" msg="The function &apos;RevertSequence&apos; is never used." />
    <error file="include\Card.h" line="71" id="unusedFunction" severity="style" msg="The function &apos;SameRankAndSuit&apos; is never used." />
    <error file="include\GameMove.h" line="142" id="unusedFunction" severity="style" msg="The function &apos;SetDrawNumber&apos; is never used." />
    <error file="include\GameMove.h" line="179" id="unusedFunction" severity="style" msg="The function &apos;SetSuccess&apos; is never used." />
    <error file="src\PlayingCards.cpp" line="586" id="unusedFunction" severity="style" msg="The function &apos;SortByProbability&apos; is never used." />
    <error file="include\GameMove.h" line="180" id="unusedFunction" severity="style" msg="The function &apos;Success&apos; is never used." />
    <error file="include\GameMove.h" line="113" id="unusedFunction" severity="style" msg="The function &apos;ToInputX&apos; is never used." />
    <error file="include\GameMove.h" line="114" id="unusedFunction" severity="style" msg="The function &apos;ToInputY&apos; is never used." />
    <error file="include\GameMove.h" line="122" id="unusedFunction" severity="style" msg="The function &apos;UseFrom&apos; is never used." />
    <error file="include\GameMove.h" line="118" id="unusedFunction" severity="style" msg="The function &apos;UseY&apos; is never used." />
    <error file="src\AllowedMoves.cpp" line="130" id="unusedFunction" severity="style" msg="The function &apos;ValidMove&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="2938" id="unusedFunction" severity="style" msg="The function &apos;asCString&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="2983" id="unusedFunction" severity="style" msg="The function &apos;asConstString&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="4201" id="unusedFunction" severity="style" msg="The function &apos;dropNullPlaceholders&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="4199" id="unusedFunction" severity="style" msg="The function &apos;enableYAMLCompatibility&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="998" id="unusedFunction" severity="style" msg="The function &apos;getFormatedErrorMessages&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1018" id="unusedFunction" severity="style" msg="The function &apos;getStructuredErrors&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1068" id="unusedFunction" severity="style" msg="The function &apos;good&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="3560" id="unusedFunction" severity="style" msg="The function &apos;isBool&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="3644" id="unusedFunction" severity="style" msg="The function &apos;isString&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="3865" id="unusedFunction" severity="style" msg="The function &apos;make&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="4203" id="unusedFunction" severity="style" msg="The function &apos;omitEndingLineFeed&apos; is never used." />
    <error file="..\jsoncpp\dist\json\json.h" line="476" id="unusedFunction" severity="style" msg="The function &apos;operatorchar*&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="1033" id="unusedFunction" severity="style" msg="The function &apos;pushError&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="3461" id="unusedFunction" severity="style" msg="The function &apos;removeIndex&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="3823" id="unusedFunction" severity="style" msg="The function &apos;resolve&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="237" id="unusedFunction" severity="style" msg="The function &apos;strictMode&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="2085" id="unusedFunction" severity="style" msg="The function &apos;validate&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="2516" id="unusedFunction" severity="style" msg="The function &apos;what&apos; is never used." />
    <error file="..\jsoncpp\dist\jsoncpp.cpp" line="5066" id="unusedFunction" severity="style" msg="The function &apos;writeString&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
