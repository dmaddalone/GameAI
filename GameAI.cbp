<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<CodeBlocks_project_file>
	<FileVersion major="1" minor="6" />
	<Project>
		<Option title="GameAI" />
		<Option pch_mode="2" />
		<Option compiler="gcc" />
		<Option show_notes="0">
			<notes>
				<![CDATA[TODO: NO MOVE is messing up network play
TODO: Make hostname work
TODO: Remove magic numbers
TODO: Minimax can't see checkmate easily??
TODO: Check other TODOs

Go Fish AI:
Knowns: 1) ranks in hand 2) asks from opponent 3) books
Ranks in deck = deck - 1 - 2 - 3
Valuing Moves:
a) Rank in my hand = 1; additive up to 3
b) Asks by my opponent = 4
c) Calculate probability of rank in opponent hand

Blackboard - for Player N
	Deck cProbableDeck // List of ranks that the deck probably has
		RemoveCardFromDeck()
		UpdateRankProbability(sRank, fProbability)
		SortByProbability()

	Hand cProbableOpponentHand // List of ranks that opponent probably has
		AddCardToOpponent()
		RemoveCardFromOpponent()
		UpdateRankProbability()
		SortByProbability()
		Cards()

	std::map<std::string, int> m_mAsks;

	BlackBoardUpdate(Game &cGame)
	{
	}

	BlackboardMove(Hand &cMyHand)
	{
		//
		// Ask for cards that opponent probably has and I need
		//
		cProbableOpponentHand.SortByProbability();
		for (auto &cProbableCard : cProbableOpponentHand.Cards())
		{
			if (cProbableCard.Probability() >= 50%)
			{
				for (auto &cCard : cMyHand)
				{
					if (cProbableCard.Rank() == cCard.Rank())
					{
						return cCard;
					}
				}
			}
		}

		//
		// Ask for cards that the deck has, and I have a good chance of pulling
		//
		cProbableDeck.SortByProbability();

		//float fProbabilityOfPullingCard = Number of Traget Cards in the Deck / cProbableDeck.HasCards();

		for (auto &cProbableCard : cProbableDeck.Cards())
		{
			// Ask if probability of successfully pulling the card is 15%
			fProbabilityOfPullingCard = cProbableDeck.HasRank(cProbableCard.Rank()) / cProbableDeck.HasCards() * cProbableCard.Probability();
			if (fProbabilityOfPullingCard > 15%)
			{
				for (auto &cCard : cMyHand)
				{
					if (cProbableCard.Rank() == cCard.Rank())
					{
						return cCard;
					}
				}
			}
		}

		//
		// Ask for cards that I have many of and I have not asked for recently
		//
		Card cLastCard;
		Card cBestCard;
		std::map<std::string, int>::iterator it;
		int nLowestNumberOfAsks {1};

		MyHand.SortByNumberOfRanks();

		// Loop through my hands in order of number of Ranks in hand
		for (auto &cCard MyHand.Cards())
		{			
			// If last card rank is not the same as this card rank, evaluate
			if (cLastCard.Rank() != cCard.Rank())
			{
				// Update last card
				cLastCard = cCard;
				
				// Find number of asks for this rank
				it = m_mAsks.find(cCard.Rank());

				// If found, evaluate
				if (it != std::map.end())
				{
					// If number of asks is lower than previous, update best card to ask for
					if (it->second < nLowestNumberOfAsks)
					{
						nLowestNumberOfAsks = it->second;
						cBestCard = cCard;
					}
				} 
				// A previous ask is not found, update best card
				else 
				{
					// if best card has not yet been assigned, update best card to ask for, and break
					if (!cBestCard.Rank().empty())
					{
						nLowestNumberOfAsks = 0;
						cBestCard = cCard;
						break;
					}
				}
			}
		}

		return cBestCard;
	}
		

		
		




]]>
			</notes>
		</Option>
		<Build>
			<Target title="Debug">
				<Option output="bin/Debug/GameAI" prefix_auto="1" extension_auto="1" />
				<Option object_output="obj/Debug/" />
				<Option type="1" />
				<Option compiler="gcc" />
				<Option parameters="-1 ai  -2 human -g go-fish" />
				<Compiler>
					<Add option="-std=c++11" />
					<Add option="-Wextra" />
					<Add option="-Wall" />
					<Add option="-g" />
					<Add directory="include" />
				</Compiler>
			</Target>
			<Target title="Release">
				<Option output="bin/Release/GameAI" prefix_auto="1" extension_auto="1" />
				<Option object_output="obj/Release/" />
				<Option type="1" />
				<Option compiler="gcc" />
				<Compiler>
					<Add option="-O2" />
					<Add option="-std=c++11" />
					<Add option="-Wextra" />
					<Add option="-Wall" />
					<Add directory="include" />
				</Compiler>
				<Linker>
					<Add option="-s" />
				</Linker>
			</Target>
			<Target title="Debug Windows">
				<Option output="bin/Debug/GameAI" prefix_auto="1" extension_auto="1" />
				<Option object_output="obj/Debug/" />
				<Option type="1" />
				<Option compiler="gcc" />
				<Option parameters="-1 ai -2 human -g go-fish" />
				<Compiler>
					<Add option="-std=c++11" />
					<Add option="-Wextra" />
					<Add option="-Wall" />
					<Add option="-g" />
					<Add directory="include" />
				</Compiler>
				<Linker>
					<Add option="-lws2_32" />
				</Linker>
			</Target>
			<Target title="Release Windows">
				<Option output="bin/Release/GameAI" prefix_auto="1" extension_auto="1" />
				<Option object_output="obj/Release/" />
				<Option type="1" />
				<Option compiler="gcc" />
				<Option parameters="-1 server -2 human -g war" />
				<Compiler>
					<Add option="-O2" />
					<Add option="-std=c++11" />
					<Add option="-Wextra" />
					<Add option="-Wall" />
					<Add directory="include" />
				</Compiler>
				<Linker>
					<Add option="-s" />
					<Add option="-lws2_32" />
				</Linker>
			</Target>
		</Build>
		<Compiler>
			<Add option="-Wall" />
			<Add option="-fexceptions" />
		</Compiler>
		<Unit filename="../jsoncpp/dist/json/json.h" />
		<Unit filename="../jsoncpp/dist/jsoncpp.cpp" />
		<Unit filename="include/AIPlayer.h" />
		<Unit filename="include/Blackboard.h" />
		<Unit filename="include/BoardGame.h" />
		<Unit filename="include/Card.h" />
		<Unit filename="include/CardGame.h" />
		<Unit filename="include/CardGameGoFish.h" />
		<Unit filename="include/CardGameWar.h" />
		<Unit filename="include/Chess.h" />
		<Unit filename="include/ChessAttack.h" />
		<Unit filename="include/ChessBaby.h" />
		<Unit filename="include/ChessElena.h" />
		<Unit filename="include/ChessGame.h" />
		<Unit filename="include/ChessGardner.h" />
		<Unit filename="include/ChessJacobsMeirovitz.h" />
		<Unit filename="include/ChessLosAlamos.h" />
		<Unit filename="include/ChessPetty.h" />
		<Unit filename="include/ChessQuick.h" />
		<Unit filename="include/ChessSpeed.h" />
		<Unit filename="include/Client.h" />
		<Unit filename="include/ConnectFour.h" />
		<Unit filename="include/Deck.h" />
		<Unit filename="include/Game.h" />
		<Unit filename="include/GameAIException.h" />
		<Unit filename="include/GameAIVersion.h" />
		<Unit filename="include/GameBoard.h" />
		<Unit filename="include/GameMove.h" />
		<Unit filename="include/GamePiece.h" />
		<Unit filename="include/GameVocabulary.h" />
		<Unit filename="include/Hand.h" />
		<Unit filename="include/Human.h" />
		<Unit filename="include/LinearGame.h" />
		<Unit filename="include/Logger.h" />
		<Unit filename="include/NetworkPlayer.h" />
		<Unit filename="include/Player.h" />
		<Unit filename="include/PlayingCards.h" />
		<Unit filename="include/Reversi.h" />
		<Unit filename="include/Server.h" />
		<Unit filename="include/Socket.h" />
		<Unit filename="include/SocketException.h" />
		<Unit filename="include/TTT.h" />
		<Unit filename="main.cpp" />
		<Unit filename="src/AIPlayer.cpp" />
		<Unit filename="src/Blackboard.cpp" />
		<Unit filename="src/BoardGame.cpp" />
		<Unit filename="src/Card.cpp" />
		<Unit filename="src/CardGame.cpp" />
		<Unit filename="src/CardGameGoFish.cpp" />
		<Unit filename="src/CardGameWar.cpp" />
		<Unit filename="src/Chess.cpp" />
		<Unit filename="src/ChessAttack.cpp" />
		<Unit filename="src/ChessBaby.cpp" />
		<Unit filename="src/ChessElena.cpp" />
		<Unit filename="src/ChessGame.cpp" />
		<Unit filename="src/ChessGardner.cpp" />
		<Unit filename="src/ChessJacobsMeirovitz.cpp" />
		<Unit filename="src/ChessLosAlamos.cpp" />
		<Unit filename="src/ChessPetty.cpp" />
		<Unit filename="src/ChessQuick.cpp" />
		<Unit filename="src/ChessSpeed.cpp" />
		<Unit filename="src/Client.cpp" />
		<Unit filename="src/ConnectFour.cpp" />
		<Unit filename="src/Deck.cpp" />
		<Unit filename="src/Game.cpp" />
		<Unit filename="src/GameBoard.cpp" />
		<Unit filename="src/GameMove.cpp" />
		<Unit filename="src/GameVocabulary.cpp" />
		<Unit filename="src/Hand.cpp" />
		<Unit filename="src/Human.cpp" />
		<Unit filename="src/LinearGame.cpp" />
		<Unit filename="src/Logger.cpp" />
		<Unit filename="src/NetworkPlayer.cpp" />
		<Unit filename="src/Player.cpp" />
		<Unit filename="src/PlayingCards.cpp" />
		<Unit filename="src/Reversi.cpp" />
		<Unit filename="src/Server.cpp" />
		<Unit filename="src/Socket.cpp" />
		<Unit filename="src/TTT.cpp" />
		<Extensions>
			<code_completion />
			<debugger />
			<envvars />
		</Extensions>
	</Project>
</CodeBlocks_project_file>
